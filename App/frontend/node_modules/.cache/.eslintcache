[{"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/index.js":"1","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/App.js":"2","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/reportWebVitals.js":"3","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/loginView.js":"4","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/pupil/pupilPanel.js":"5","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/adminPanel.js":"6","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/manageTest.js":"7","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/teacherPanel.js":"8","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/pupil/PupilTestDetails.js":"9","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/ManageStudentTestPopup.js":"10","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/ManageTestPopup.js":"11","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/APIUtils.js":"12","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/TeacherAPI.js":"13","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/PupilAPI.js":"14","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/SubjectTab.js":"15","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/UserTab.js":"16","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/ClassTable.js":"17","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/PupilTab.js":"18","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/AdminAPI.js":"19","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/SubjectPopUp.js":"20","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/Userpopup.js":"21","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/Tablepopup.js":"22"},{"size":500,"mtime":1623443386400,"results":"23","hashOfConfig":"24"},{"size":1136,"mtime":1624045487450,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1623443386400,"results":"26","hashOfConfig":"24"},{"size":4301,"mtime":1625313276190,"results":"27","hashOfConfig":"24"},{"size":8748,"mtime":1625309513220,"results":"28","hashOfConfig":"24"},{"size":3939,"mtime":1625313421110,"results":"29","hashOfConfig":"24"},{"size":20746,"mtime":1625308928130,"results":"30","hashOfConfig":"24"},{"size":5953,"mtime":1625311075110,"results":"31","hashOfConfig":"24"},{"size":1859,"mtime":1624646497790,"results":"32","hashOfConfig":"24"},{"size":3417,"mtime":1624646659360,"results":"33","hashOfConfig":"24"},{"size":4582,"mtime":1624646713490,"results":"34","hashOfConfig":"24"},{"size":535,"mtime":1623599026820,"results":"35","hashOfConfig":"24"},{"size":3220,"mtime":1624523584130,"results":"36","hashOfConfig":"24"},{"size":1452,"mtime":1624230666970,"results":"37","hashOfConfig":"24"},{"size":11269,"mtime":1625310030260,"results":"38","hashOfConfig":"24"},{"size":9042,"mtime":1625309826470,"results":"39","hashOfConfig":"24"},{"size":8528,"mtime":1625310439920,"results":"40","hashOfConfig":"24"},{"size":7444,"mtime":1625312174580,"results":"41","hashOfConfig":"24"},{"size":6401,"mtime":1624111540240,"results":"42","hashOfConfig":"24"},{"size":5242,"mtime":1624620566010,"results":"43","hashOfConfig":"24"},{"size":4486,"mtime":1624619123520,"results":"44","hashOfConfig":"24"},{"size":2696,"mtime":1624623518220,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l4pp8h",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/index.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/App.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/reportWebVitals.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/loginView.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/pupil/pupilPanel.js",["94","95"],"import React from \"react\";\nimport {checkUserType} from \"../../api/APIUtils\";\nimport Dropdown from \"react-dropdown\";\nimport {\n  getClassname,\n  getAllAssignedSubjects,\n  getAllTests,\n  getAllClasses,\n} from \"../../api/PupilAPI\";\n\nimport PupilTestDetails from \"./PupilTestDetails\";\nimport '../../App.css';\n\nconst redirectpath = \"/login\";\n\nconst options = [\n  {value: \"ALL\", label: \"All Users\"},\n  {value: \"Admin\", label: \"Admin\"},\n  {value: \"Pupil\", label: \"Pupil\"},\n  {value: \"Teacher\", label: \"Teacher\"},\n];\n\nexport default class pupilPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      uid: this.props.location.state.uid,\n      className: \"\",\n      classId: \"\",\n      allClasses: [],\n      token: this.props.location.state\n          ? \"token \" + this.props.location.state.token\n          : \"\",\n      subjectList: [],\n      subjectTestDetailsList: [],\n      showPopup: false,\n      popupHeaderText: \"\",\n      t_firstn:this.props.location.state.t_firstn,\n      t_lastn:this.props.location.state.t_lastn\n    };\n\n    this.logoutAction = this.logoutAction.bind(this);\n    this.loadFillData = this.loadFillData.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n    this.getLoggedInClassname = this.getLoggedInClassname.bind(this);\n    this.getAllSUbjects = this.getAllSUbjects.bind(this);\n    this.getAllTestResult = this.getAllTestResult.bind(this);\n    this.getAllPupilClasses = this.getAllPupilClasses.bind(this);\n  }\n\n  componentDidMount() {\n    var that = this;\n    var pid = that.state.uid;\n    var token = this.props.location.state\n        ? this.props.location.state.token\n        : \"\";\n    if (token) {\n      window.onpopstate = function (event) {\n        that.props.history.go(1);\n      };\n    }\n    checkUserType(\"token \" + token).then((res) => {\n      if (res.status === \"FAILED\") that.props.history.push(\"/\");\n    });\n    that.getLoggedInClassname(pid, token);\n    that.getAllPupilClasses(pid, token);\n\n\n    //that.getLoggedInSUbjects(pid, cid, token);\n  }\n\n  render() {\n    var that = this;\n    return (\n        <div>\n          <div className=\"fill-window\">\n            <div className='main-title-area' style={{paddingBottom: '20px'}}>\n            <h3>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" margin=\"10px\" fill=\"currentColor\" class=\"bi bi-person-badge\" viewBox=\"0 0 16 16\">\n                <path d=\"M6.5 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\"></path>\n                <path d=\"M4.5 0A2.5 2.5 0 0 0 2 2.5V14a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2.5A2.5 2.5 0 0 0 11.5 0h-7zM3 2.5A1.5 1.5 0 0 1 4.5 1h7A1.5 1.5 0 0 1 13 2.5v10.795a4.2 4.2 0 0 0-.776-.492C11.392 12.387 10.063 12 8 12s-3.392.387-4.224.803a4.2 4.2 0 0 0-.776.492V2.5z\"></path>\n              </svg>\n              &nbsp; Pupil View</h3>\n              <div style={{textAlign:'right', marginTop:'10px'}}>\n                <h6> \n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-person-circle\" viewBox=\"0 0 16 16\">\n                    <path d=\"M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\"></path>\n                    <path fill-rule=\"evenodd\" d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z\"></path>\n                  </svg>\n                  &nbsp; <b>{this.state.t_firstn} {this.state.t_lastn}</b></h6>\n               <button type=\"button\" style={{margin:'5px 0 0 0'}} className=\"btn\" onClick={this.logoutAction}>Logout</button>\n              </div>\n            </div>\n            <div className='tab-area'  style={{backgroundColor:'#f9fbfd'}}>\n              <div className=\"box-container\">\n                <div className='selection-area' style={{marginTop: '50px'}}>\n                \n                <div className=\"dropDownItem card row justify-content-center align-items-center\" style={{height:'150px'}}>\n                   <h5>You are in class <br/></h5>\n                   <h6 style={{color:'#2c7be5'}}><b>{that.state.className} </b></h6>\n                  </div>\n                \n                <div className=\"dropDownItem card row justify-content-center align-items-center\" style={{marginTop:'20px', height:'200px'}}>\n                    <p><b>Select a class</b></p>\n                  <Dropdown\n                      classname=\"style.dropDown\"\n                      options={that.state.allClasses}\n                      onChange={that.getAllSUbjects}\n                      placeholder=\"Select a class\"\n                      placeholderClassName=\"myPlaceholderClassName\"\n                  />\n                  </div>\n                </div>\n                <div className=\"table-box\" style={{marginTop: '50px'}}>\n                <div className=\"ag-theme-alpine data-table\">\n                  <div className=\"table-scroll\">\n                    <table className=\"table table-hover\">\n                      <thead className=\"thead-light\">\n                      <tr key={\"user_key1\"}>\n                        <th scope=\"col\">Subject</th>\n                        <th scope=\"col\">Avg. Grade</th>\n                        <th scope=\"col\">Details</th>\n                      </tr>\n                      </thead>\n                      <tbody>\n                      {this.loadFillData()}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n                </div>\n              </div>\n            </div>\n            {that.state.showPopup ? (\n                <PupilTestDetails\n                    subjectTestDetailsList={that.state.subjectTestDetailsList}\n                    popupHeaderText={that.state.popupHeaderText}\n                    closePopup={that.closePopup}\n                />\n            ) : null}\n          </div>\n        </div>\n    );\n  }\n\n  logoutAction() {\n    var that = this;\n    that.setState({token: \"\"}, () => {\n      that.props.history.push({pathname: redirectpath});\n    });\n  }\n\n  loadFillData() {\n    if (this.state.subjectList.length) {\n      return this.state.subjectList.map((data) => {\n         if (data.avgGrade || data.sid || data.subjectname) {\n           return (\n               <tr key={data.sid}>\n                 <th>{data.subjectname}</th>\n                 <th>{data.avgGrade}</th>\n                 <td>\n                   {\n                     <button\n                         className=\"btn p-0\"\n                         onClick={() => this.openDetailsPopup(data)}\n                     >\n                       <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-view-list\" viewBox=\"0 0 16 16\">\n                        <path d=\"M3 4.5h10a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2zm0 1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1H3zM1 2a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 2zm0 12a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 14z\"></path>\n                      </svg>\n                     </button>\n                   }\n                 </td>\n               </tr>\n           );\n         }\n      });\n    }\n  }\n\n  openDetailsPopup(data) {\n    var that = this;\n    that.setState({popupHeaderText: \"Test Details for \" + data.subjectname});\n    getAllTests(data.sid, that.state.uid, that.state.token).then((data) => {\n      that.setState(\n          {\n            subjectTestDetailsList: data.data,\n          },\n          () => {\n            that.togglePopup();\n          }\n      );\n    });\n  }\n\n  closePopup() {\n    this.setState(\n        {\n          popupHeaderText: \"\",\n          // subjectTestDetailsList:[]\n        },\n        () => {\n          this.togglePopup();\n        }\n    );\n  }\n\n  togglePopup() {\n    this.setState({showPopup: !this.state.showPopup});\n  }\n\n  getLoggedInClassname(pid, token) {\n    getClassname(pid, \"Token \" + token).then((data) => {\n      this.setState({className: data.classname, classId: data.cid}, () => {\n        console.log(this.state.classId)\n      });\n    });\n  }\n\n\n  getAllPupilClasses(pid, token) {\n    var tempList = [];\n    getAllClasses(pid, \"Token \" + token).then((data) => {\n      console.log(data)\n      data.forEach((info) => {\n        var obj = {value: info.cid, label: info.classname};\n        tempList.push(obj);\n      });\n      this.setState({allClasses: tempList});\n    });\n  }\n\n  getAllSUbjects(e) {\n    var cid = e.value;\n    var pid = this.state.uid;\n    var token = this.state.token;\n    getAllAssignedSubjects(pid, cid, token).then((data) => {\n      this.setState({subjectList: data.data});\n    });\n  }\n\n  getAllTestResult(sid, pid, token) {\n    getAllTests(sid, pid, \"Token \" + token).then((data) => {\n      this.setState({subjectTestDetailsList: data.data});\n    });\n  }\n}\n","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/adminPanel.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/manageTest.js",["96"],"import React from \"react\";\n\nimport Dropdown from \"react-dropdown\";\nimport {\n  getStudentMarkDetails,\n  createNewTest,\n  getTestDetails,\n  checkResultID,\n  uploadResult,\n  deleteATest,\n  updateResult,\n  updateATest,\n  getAvgMark\n} from \"../../api/TeacherAPI\";\n\nimport {CSVReader} from \"react-papaparse\";\n\nimport \"../../App.css\";\nimport ManageTestPopup from \"./ManageTestPopup\";\nimport ManageStudentTestPopup from \"./ManageStudentTestPopup\";\n\nconst buttonRef = React.createRef();\n\nvar redirectloginpath = \"/teacherpanel\"\n\nexport default class manageTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: this.props.location.state.token,\n      uid: this.props.location.state.uid,\n      subjectname: this.props.location.state.info.subjectname,\n      sid: this.props.location.state.info.sid,\n      cid: this.props.location.state.info.cid,\n      classname: this.props.location.state.info.classname,\n      testDetailsList: this.props.location.state.testList,\n      testList: [],\n      studentList: [],\n      selectedTest: this.props.location.state.selectedTest,\n      studentMarkData: [],\n      t_firstn:this.props.location.state.t_firstn,\n      t_lastn:this.props.location.state.t_lastn,\n\n      showTestPopup: false,\n      showStudentGradePopup: false,\n      showPopUp: false,\n\n      popupHeaderText: '',\n      popupBtnText: '',\n      studentData: '',\n\n      testResult: [],\n      tid: \"\",\n      testname: \"\",\n      testdate: \"\",\n      isAvgMarks: false,\n    };\n\n    this.getAllTests = this.getAllTests.bind(this);\n    this.loadFillData = this.loadFillData.bind(this);\n    this.onTestChange = this.onTestChange.bind(this);\n    this.gotoBack = this.gotoBack.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.loadStudentList = this.loadStudentList.bind(this);\n\n    this.toggleNewTestPopup = this.toggleNewTestPopup.bind(this);\n    this.toggleStudentGradePopup = this.toggleStudentGradePopup.bind(this);\n\n    this.openStudentTestGradeUpdatePopup =\n        this.openStudentTestGradeUpdatePopup.bind(this);\n    this.openNewTestPopup = this.openNewTestPopup.bind(this);\n    this.openUpdatePopup = this.openUpdatePopup.bind(this);\n\n    this.closeStudentGradePopup = this.closeStudentGradePopup.bind(this);\n    this.closeTestPopup = this.closeTestPopup.bind(this);\n    this.uploadTestResult = this.uploadTestResult.bind(this);\n    this.updateInfo = this.updateInfo.bind(this);\n\n    this.addTest = this.addTest.bind(this);\n    this.setID = this.setID.bind(this);\n    this.deleteInfo = this.deleteInfo.bind(this);\n    this.updateTest = this.updateTest.bind(this);\n    this.showAvgMarks = this.showAvgMarks.bind(this);\n  }\n\n  showAvgMarks() {\n    var that = this;\n    getAvgMark(that.state.sid, that.state.cid, \"Token \"+ that.state.token).then(response => {\n      that.setState({isAvgMarks: true, studentList: response.data, selectedTest: \"\"})\n    })\n  }\n\n  setID() {\n    return \"RES\" + Date.now();\n  }\n\n  uploadTestResult() {\n    var that = this;\n    var countRow = 0;\n    if (this.state.studentMarkData.length) {\n      this.state.studentMarkData.forEach((stdData, idx) => {\n        checkResultID(stdData, \"Tokenn \" + that.state.token).then(\n            (response) => {\n              if (response.res.length) {\n                stdData.rid = response.res[0].resid;\n              } else {\n                stdData.rid = that.setID() + idx;\n              }\n\n              uploadResult(stdData, \"Token \" + that.state.token).then(\n                  (response) => {\n                    if (response.status === \"SUCCESS\") {\n                      that.loadStudentList();\n                    }\n                  }\n              );\n            }\n        );\n      });\n    } else {\n      alert(\"Please select a CSV file.\");\n    }\n  }\n\n  openUpdatePopup(data) {\n    var that = this;\n    if (this.state.selectedTest)\n      that.setState(\n          {\n            popupHeaderText:\n                \"Update selected Test for \" +\n                that.state.classname +\n                \" - \" +\n                that.state.subjectname,\n            popupBtnText: \"Update\",\n          },\n          () => {\n            that.toggleNewTestPopup();\n          }\n      );\n    else {\n      alert(\"Please select a test\")\n    }\n  }\n\n  toggleNewTestPopup() {\n    this.setState({showPopUp: !this.state.showPopUp});\n  }\n\n  closeTestPopup() {\n    var that = this;\n    that.setState(\n        {\n          popupHeaderText: \"\",\n          popupBtnText: \"\",\n        },\n        () => {\n          that.toggleNewTestPopup();\n        }\n    );\n  }\n\n  openNewTestPopup() {\n    var that = this;\n    that.setState({\n      popupHeaderText: \"Add A new Test for \" + that.state.classname + \" - \" + that.state.subjectname,\n      popupBtnText: \"Add\",\n    }, () => {\n      that.toggleNewTestPopup();\n    })\n  }\n\n  toggleStudentGradePopup() {\n    this.setState({showStudentGradePopup: !this.state.showStudentGradePopup})\n  }\n\n  closeStudentGradePopup() {\n    var that = this;\n    this.setState({\n          popupHeaderText: '',\n          popupBtnText: \"\",\n          studentData: '',\n        },\n        () => {\n          that.toggleStudentGradePopup();\n        })\n  }\n\n  openStudentTestGradeUpdatePopup(data) {\n    var that = this;\n    that.setState({\n      popupHeaderText: data.name + \"'s test and grade update\",\n      popupBtnText: \"Update\",\n      studentMarkData: data,\n\n    }, () => {\n      that.toggleStudentGradePopup();\n    })\n  }\n\n  loadStudentList() {\n    var that = this;\n    getStudentMarkDetails(that.state.selectedTest, that.state.sid, that.state.cid , that.state.token).then(response => {\n      if (response)\n        if (response.data) {\n          that.setState({studentList: response.data})\n        }\n    })\n  }\n\n  handleOpenDialog = (e) => {\n    if (buttonRef.current) {\n      buttonRef.current.open(e);\n    }\n  };\n\n  handleOnRemoveFile = (data) => {\n    var that = this;\n    this.setState({studentMarkData: data ? data : []}, () => {\n      console.log(that.state.studentMarkData);\n    });\n  };\n\n  handleRemoveFile = (e) => {\n    if (buttonRef.current) {\n      buttonRef.current.removeFile(e);\n    }\n  };\n\n  handleOnFileLoad = (data) => {\n    var that = this;\n    var obj = [];\n    if (data) {\n      data.forEach((dt, idx) => {\n        if (idx !== 0)\n          obj.push({\n            uid: dt.data[0],\n            grade: dt.data[1],\n            sid: that.state.sid,\n            tid: that.state.selectedTest,\n            rid: \"\",\n          });\n      });\n    }\n    this.setState({studentMarkData: obj}, () => {\n      console.log(that.state.studentMarkData);\n    });\n  };\n\n  handleOnError = (err, file, inputElem, reason) => {\n  };\n\n  componentDidMount() {\n    this.getAllTests();\n    this.loadStudentList();\n  }\n\n  render() {\n    var that = this;\n    return (\n        <div>\n          <div className=\"fill-window\">\n            <div className='main-title-area' style={{paddingBottom: '20px'}}>\n            <h3>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" margin=\"10px\" fill=\"currentColor\" class=\"bi bi-person-badge\" viewBox=\"0 0 16 16\">\n                <path d=\"M6.5 2a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\"></path>\n                <path d=\"M4.5 0A2.5 2.5 0 0 0 2 2.5V14a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2.5A2.5 2.5 0 0 0 11.5 0h-7zM3 2.5A1.5 1.5 0 0 1 4.5 1h7A1.5 1.5 0 0 1 13 2.5v10.795a4.2 4.2 0 0 0-.776-.492C11.392 12.387 10.063 12 8 12s-3.392.387-4.224.803a4.2 4.2 0 0 0-.776.492V2.5z\"></path>\n              </svg>\n              &nbsp; Teacher View</h3>\n              <div style={{textAlign:'right', marginTop:'10px'}}>\n                <h6> \n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-person-circle\" viewBox=\"0 0 16 16\">\n                    <path d=\"M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z\"></path>\n                    <path fill-rule=\"evenodd\" d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z\"></path>\n                  </svg>\n                  &nbsp; <b>{this.state.t_firstn} {this.state.t_lastn}</b></h6>\n              </div>\n            </div>\n            <div className='tab-area' style={{backgroundColor:'#f9fbfd'}}>\n              <div className=\"subtitle-area\">\n                <button className=\"btn btn-text\" onClick={this.gotoBack}>\t&#60; Back</button>\n                <h4 style={{color: '#8c8c8c', textAlign: 'center', margin: '20px auto'}}>Test Management\n                  for {that.state.classname} - {that.state.subjectname}</h4>\n              </div>\n              <div className=\"box-container\">\n                <div className='selection-area'\n                     style={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between'}}>\n                  <div>\n                  <div className=\"dropDownItem card row justify-content-center align-items-center\" style={{height:'200px'}}>\n                    <p><b>Select a test</b></p>\n                    <Dropdown\n                        classname=\"style.dropDown\"\n                        value={\n                          that.state.testList[\n                              this.getIndex(this.state.testList, this.state.selectedTest)\n                              ]\n                        }\n                        options={that.state.testList}\n                        onChange={this.onTestChange}\n                        placeholder=\"Select a test\"\n                        placeholderClassName=\"myPlaceholderClassName\"\n                    />\n                    <br/>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => this.showAvgMarks(that.state.selectedTest)}\n                    >\n                      View Avg. Mark\n                    </button>\n                  </div>\n                    <div className=\"SecondItem card row justify-content-center align-items-center\">\n                    <p><b>Settings: Test</b></p>\n                    <button className=\"btn btn-success\" onClick={this.openNewTestPopup}> Add</button>\n                    <div style={{width:'100%', marginTop:'10px'}}>\n                    <button\n                        className=\"btn\" style={{width:'26%', backgroundColor:'#a3bff0',borderColor:'#a3bff0'}}\n                        onClick={() => this.openUpdatePopup(that.state.classinfo)}\n                    >\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-pencil-square\" viewBox=\"0 0 16 16\">\n                        <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"></path>\n                        <path fill-rule=\"evenodd\" d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"></path>\n                      </svg>\n                    </button>\n                    <button\n                        className=\"btn\" style={{width:'26%', marginLeft:'10px', backgroundColor:'#f0a3a7',borderColor:'#f0a3a7'}} \n                        onClick={() => this.deleteInfo(that.state.selectedTest)}\n                    >\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-trash\" viewBox=\"0 0 16 16\">\n                        <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"></path>\n                        <path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"></path>\n                      </svg>\n                    </button>\n                    </div>\n                    </div>\n                    <div className=\"SecondItem card row justify-content-center align-items-center\">\n                    <p><b>Upload a CSV file</b></p>\n                      <div className=\"upload-area\">\n                        <CSVReader\n                            noClick\n                            noDrag\n                            ref={buttonRef}\n                            onFileLoad={this.handleOnFileLoad}\n                            onError={this.handleOnError}\n                            onRemoveFile={this.handleOnRemoveFile}\n                        >\n                          {({file}) => (\n                              <aside\n                                  style={{}}\n                              >\n                                <button className=\"btn\" id=\"browse\" type=\"button\" onClick={this.handleOpenDialog}> \n                                Browse\n                                </button>\n                                <div style={{}}>{file && file.name}</div>\n                                <button className=\"btn\" id=\"delete\" type=\"button\" onClick={this.handleRemoveFile}>\n                                Remove\n                                </button>\n                              </aside>\n                          )}\n                        </CSVReader>\n                        \n                      </div>\n                      <button className=\"btn btn-primary\" onClick={this.uploadTestResult}>\n                          Upload\n                      </button>\n                  </div>\n                  </div>\n                </div>\n                <div className=\"table-box\">\n                {that.state.studentList.length ? (\n                    <div className=\"ag-theme-alpine data-table\">\n                      <div className=\"table-scroll\">\n                        <table className=\"table table-hover\">\n                          <thead className=\"thead-light\">\n                          <tr key={\"user_key1\"}>\n                            <th scope=\"col\">Student Name</th>\n                            <th scope=\"col\">{that.state.isAvgMarks ? \"Avg.Marks\" : \"Grade\"}</th>\n                            {that.state.isAvgMarks ? \"\" : <th scope=\"col\">Action</th>}\n                          </tr>\n                          </thead>\n                          <tbody>{this.loadFillData()}</tbody>\n                        </table>\n                      </div>\n                    </div>\n                ) : (\n                    <div>\n                      <label>No student is in this class and test</label>\n                    </div>\n                )}\n                </div>\n                {that.state.showPopUp ? (\n                    <ManageTestPopup\n                        testList={that.state.testList}\n                        selectedTest={that.state.selectedTest}\n                        popupHeaderText={that.state.popupHeaderText}\n                        testDetailsList={that.state.testDetailsList}\n                        sid={that.state.sid}\n                        popupBtnText={that.state.popupBtnText}\n                        updateTest={that.updateTest}\n                        addTest={that.addTest}\n                        closePopup={that.closeTestPopup}\n                    />\n                ) : null}\n\n                {that.state.showStudentGradePopup ? (\n                    <ManageStudentTestPopup\n                        testList={that.state.testList}\n                        selectedTest={that.state.selectedTest}\n                        popupHeaderText={that.state.popupHeaderText}\n                        studentData={that.state.studentData}\n                        popupBtnText={that.state.popupBtnText}\n                        studentMarkData={that.state.studentMarkData}\n                        //        addUser={that.addUser}\n                        updateInfo={that.updateInfo}\n                        closePopup={that.closeStudentGradePopup}\n                    />\n                ) : null}\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n  }\n\n  getIndex(arr, testVal) {\n    return arr.findIndex((obj) => obj.value === testVal);\n  }\n\n  gotoBack() {\n    this.props.history.push({\n      pathname: redirectloginpath,\n      state: {token: this.state.token, uid: this.state.uid, t_firstn:this.state.t_firstn,\n        t_lastn:this.state.t_lastn},\n    });\n  }\n\n  onTestChange(data) {\n    var that = this;\n    this.setState({selectedTest: data.value, isAvgMarks: false}, () => {\n      that.loadStudentList();\n    });\n  }\n\n  loadFillData() {\n    if (this.state.studentList.length) {\n      return this.state.studentList.map((data, idx) => {\n        return (\n            <tr key={data.username + idx}>\n              <td>{data.name}</td>\n              <td>{ this.state.isAvgMarks ? data.avgGrade : data.marks}</td>\n              {this.state.isAvgMarks ? \"\" : <td>\n                {<button className=\"btn p-0\"\n                         onClick={() => this.openStudentTestGradeUpdatePopup(data)}>\n                         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-pencil-square\" viewBox=\"0 0 16 16\">\n                          <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"></path>\n                          <path fill-rule=\"evenodd\" d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"></path>\n                        </svg>  \n                </button>}\n              </td>}\n            </tr>\n        );\n      });\n    }\n  }\n\n  getAllTests() {\n    var tempList = [];\n    var that = this;\n\n    that.state.testDetailsList.forEach((info) => {\n      var obj = {value: info.tid, label: info.testname};\n      tempList.push(obj);\n    });\n\n    that.setState({testList: tempList}, () => {\n    });\n  }\n\n  addTest(data) {\n    var that = this;\n    console.log(that.state.token);\n\n    createNewTest(data, \"Token \" + that.state.token).then((data) => {\n      if (data.status === \"SUCCESS\") {\n        that.toggleNewTestPopup();\n        that.setState({testList: []}, () => {\n          getTestDetails(that.state.sid, \"Token \" + that.props.token).then(\n              (response) => {\n                that.setState({testDetailsList: response.data}, () => {\n                  that.getAllTests();\n                });\n              }\n          );\n        });\n      } else {\n        // alert(\"Error!!\");\n      }\n    });\n\n  }\n\n  updateTest(data) {\n    console.log(data);\n    var that = this;\n    //console.log(data)\n    updateATest(data, \"Token \" + that.state.token).then((response) => {\n      if (response.status === \"SUCCESS\") {\n        that.toggleNewTestPopup();\n        that.setState({testList: []}, () => {\n          getTestDetails(that.state.sid, \"Token \" + that.props.token).then(\n              (response) => {\n                that.setState({testDetailsList: response.data}, () => {\n                  that.getAllTests();\n                });\n              }\n          );\n        });\n      } else {\n        alert(\"Error!!\");\n      }\n    });\n  }\n\n  deleteInfo(data) {\n    var that = this;\n    console.log(data);\n    if (this.state.selectedTest) {\n      if (!window.confirm(\"Do you really want to delete the class?\")) return;\n      deleteATest(data, \"Token \" + that.state.token).then((data) => {\n        alert(data.message);\n        if (data.status === \"SUCCESS\") {\n          that.setState({testList: []}, () => {\n            getTestDetails(that.state.sid, \"Token \" + that.props.token).then(\n                (response) => {\n                  that.setState({testDetailsList: response.data, selectedTest: null}, () => {\n                    that.getAllTests();\n                  });\n                }\n            );\n          });\n        } else {\n          alert(\"Error!!\");\n        }\n      });\n    } else {\n      alert(\"Please select a test to delete\")\n    }\n  }\n\n  updateInfo(data) {\n    var that = this;\n    var result = {\n      rid: data.resid,\n      sid: this.state.sid,\n      tid: this.state.selectedTest,\n      uid: data.uid,\n      grade: data.marks,\n    };\n    updateResult(result, that.state.token).then((response) => {\n      console.log(response);\n      if (response.status === \"SUCCESS\") {\n        that.toggleStudentGradePopup();\n        that.setState({}, () => {\n          that.loadStudentList();\n        });\n      } else {\n        alert(response.message);\n      }\n    });\n  }\n}\n","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/teacherPanel.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/pupil/PupilTestDetails.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/ManageStudentTestPopup.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/ManageTestPopup.js",["97"],"import React from \"react\";\nimport \"../../App.css\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\n\nclass ManageTestPopup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sid: this.props.sid,\n      testList: this.props.testList,\n      selectedTest: this.props.selectedTest,\n      selectedTestName: \"\",\n      selectedTestDate: \"\",\n      selectedTestId: \"\",\n      testDetailsList: this.props.testDetailsList,\n    };\n    this.oninputChange = this.oninputChange.bind(this);\n    this.onTestSelect = this.onTestSelect.bind(this);\n    // this.setUserID = this.setUserID.bind(this);\n    this.sendData = this.sendData.bind(this);\n    this.resetState = this.resetState.bind(this);\n    this.close = this.close.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.popupBtnText === \"Update\") {\n      var x =\n        this.state.testList[\n        this.getIndex(this.state.testList, this.state.selectedTest)\n        ];\n\n      var dt = this.state.testDetailsList.findIndex((obj) => obj.tid === x.value);\n      this.setState(\n        {\n          selectedTestName: x.label,\n          selectedTestDate: this.state.testDetailsList[dt].testdate,\n          selectedTestId: this.state.testDetailsList[dt].tid,\n        },\n        () => {\n          console.log(this.state.selectedTestDate);\n        }\n      );\n    }\n  }\n\n  render() {\n    var that = this;\n    return (\n      <div className=\"popup\">\n        <div className=\"App popup_inner\">\n          <div className=\"custom_pop\">\n            <h4>{that.props.popupHeaderText}</h4>\n            <br />\n            <div style={{ alignItem: \"left\" }}>\n              {console.log(that.props.popupHeaderText)}\n              <label><b>Test Name</b></label>\n              <br />\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                name=\"testname\"\n                defaultValue={that.props.popupBtnText === \"Add\" ? \"\" : that.state.selectedTestName}\n                onChange={that.oninputChange.bind(this, \"testname\")}\n              />\n              <br />\n              <label><b>Test Date</b></label>\n              <br />\n              <input\n                className=\"form-control\"\n                type=\"date\"\n                name=\"testdate\"\n                defaultValue={that.props.popupBtnText === \"Add\" ? \"\" : that.state.selectedTestDate.slice(0, 10)}\n                onChange={that.oninputChange.bind(this, \"testdate\")}\n              />\n            </div>\n            <br />\n            <div className=\"popup-button-area\">\n              <button className=\"btn btn-primary\" id=\"addUpdate_btn\" onClick={that.sendData}>\n                {this.props.popupBtnText}\n              </button>\n              <button className=\"btn btn-danger\" id=\"cancel_btn\" onClick={this.close}>\n                {\"Cancel\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  getIndex(arr, testVal) {\n    return arr.findIndex((obj) => obj.value === testVal);\n  }\n\n  close() {\n    this.props.closePopup();\n  }\n\n  oninputChange(key, e) {\n    switch (key) {\n      case \"testname\":\n        this.setState({ selectedTestName: e.target.value });\n        break;\n      case \"testdate\":\n        this.setState({ selectedTestDate: e.target.value }, () => {\n          console.log(this.state.testdate);\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  onTestSelect(e) {\n    this.setState({ selectedTest: e.value });\n  }\n\n  setUserID() {\n    return \"TST\" + Date.now();\n  }\n\n  sendData() {\n    var data =\n      this.props.popupBtnText === \"Add\"\n        ? {\n          tid: this.setUserID(),\n          testname: this.state.selectedTestName,\n          testdate: this.state.selectedTestDate,\n          sid: this.state.sid,\n        }\n        : {\n          tid: this.state.selectedTestId,\n          testname: this.state.selectedTestName,\n          testdate: this.state.selectedTestDate,\n          sid: this.state.sid,\n        };\n    // debugger;\n    this.resetState();\n    if (this.props.popupBtnText === \"Add\") {\n      if (data.testname.length && data.testdate.length)\n        this.props.addTest(data);\n      else alert(\"Please Provide all information\");\n    } else {\n      if (data.testname.length && data.testdate.length)\n        this.props.updateTest(data);\n      else alert(\"Please Provide all information\");\n    }\n  }\n\n  resetState() {\n    this.setState({\n      tid: \"\",\n      testname: \"\",\n      testdate: \"\",\n    });\n  }\n}\n\nexport default ManageTestPopup;\n","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/APIUtils.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/TeacherAPI.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/PupilAPI.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/SubjectTab.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/UserTab.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/ClassTable.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/PupilTab.js",["98","99"],"import React from 'react';\nimport Dropdown from \"react-dropdown\";\nimport { getAllClass, searchPupil, getPupilByClass, updateAssignedPupil, assignPupil } from \"../../../api/AdminAPI\";\nimport SearchField from 'react-search-field';\nimport './UserTab.css'\n\nclass PupilTab extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      classByList: false,\n      selectedClass: '',\n      classList: [],\n      pupilList: [],\n      selectedPupilList: [],\n      token: \"token \" + this.props.token,\n      checkedPupil: [],\n      isPupilExists: true,\n      searchBy: ''\n    }\n    this.oninputChange = this.oninputChange.bind(this);\n    this.loadAllClass = this.loadAllClass.bind(this);\n    this.assignStudent = this.assignStudent.bind(this);\n    this.loadFillData = this.loadFillData.bind(this);\n    this.handleCheckBox = this.handleCheckBox.bind(this);\n    this.goClassTab = this.goClassTab.bind(this);\n    this.viewStudentList = this.viewStudentList.bind(this);\n    this.onClassSelect = this.onClassSelect.bind(this);\n    this.setID = this.setID.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.loadAllClass();\n  }\n\n  render() {\n    var that = this;\n    return (\n      <div>\n        <h5 style={{ color: '#8c8c8c', textAlign: 'left', margin: '10px 0 10px 9.9%' }}>Pupil Management</h5>\n        <div className=\"box-container\">\n          <div className=\"selection-area\">\n            <div className=\"dropDownItem card row justify-content-center align-items-center\">\n              <p><b>Search Pupil</b></p>\n              <SearchField placeholder='Search Pupil' onSearchClick={that.oninputChange} />\n            </div>\n            <div className=\"SecondItem card row justify-content-center align-items-center\">\n              <p><b>Select a class</b></p>\n              <Dropdown classname='style.dropDown'\n                options={this.state.classList}\n                onChange={this.onClassSelect}\n                placeholder=\"Choose a class\"\n                placeholderClassName='myPlaceholderClassName' />\n            </div>\n            <div className=\"SecondItem card row justify-content-center align-items-center\">\n              <p><b>Assign/DeAssign Pupil</b></p>\n              <button style={{ }} className=\"btn btn-success \" onClick={that.assignStudent}>Assign</button>\n              <button style={{ marginTop: '20px', backgroundColor:'#a291f2',borderColor:'#a291f2' }} className=\"btn btn-success \" onClick={that.viewStudentList}>View List</button>\n            </div>\n          </div>\n          <div className=\"table-box\">\n            {that.state.pupilList.length ?\n              <div className=\"ag-theme-alpine data-table\">\n                <div className=\"table-scroll\">\n                  <table className=\"table table-hover\">\n                    <thead className=\"thead-light\">\n                      <tr key={\"user_key1\"}>\n                        {that.state.classByList ? null : <th scope=\"col\"></th>}\n                        <th scope=\"col\">Username</th>\n                        <th scope=\"col\">First Name</th>\n                        <th scope=\"col\">Last Name</th>\n                        {that.state.classByList ? null : <th scope=\"col\">Assigned In</th>}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.loadFillData()}\n                    </tbody>\n                  </table>\n                </div>\n              </div> : null}        \n          {that.state.isPupilExists ? null : <div><label>There is no pupil information for this class</label></div>}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  goClassTab() {\n    this.props.tabSelection(1);\n  }\n\n  onClassSelect(e) {\n    this.setState({\n      selectedClass: e.value,\n      // pupilList:[],\n      // isPupilExists:true\n    })\n  }\n\n  viewStudentList() {\n    var that = this;\n    if (that.state.selectedClass) {\n      getPupilByClass(that.state.selectedClass, that.state.token).then(response => {\n        that.setState({\n          pupilList: response.data,\n          classByList: true,\n          isPupilExists: response.data.length ? true : false\n        });\n      })\n    } else {\n      alert(\"Please select a class first\")\n    }\n  }\n\n  oninputChange(e) {\n    var that = this;\n    if (e.length)\n      searchPupil(e, that.state.token).then((response) => {\n        that.setState({\n          pupilList: response.data,\n          classByList: false,\n          isPupilExists: response.data.length ? true : false,\n          searchBy: e\n        }, () => {\n          that.loadFillData();\n        })\n      })\n    else { alert(\"Please provide something to search\") }\n  }\n\n  loadAllClass() {\n    var tempList = [];\n    var that = this;\n    getAllClass(that.state.token).then((data) => {\n      data.data.forEach((info) => {\n        var obj = { value: info.cid, label: info.classname };\n        tempList.push(obj);\n      });\n      this.setState({ classList: tempList }, () => {\n        // console.log(that.state.classList)\n      });\n    });\n  }\n\n  assignStudent() {\n    var that = this;\n    if (that.state.selectedClass && that.state.selectedPupilList.length) {\n      that.state.selectedPupilList.forEach(pupil => {\n        if (that.state.selectedPupilList.length === 1 && pupil.cid === that.state.selectedClass) {\n          alert('This student is already in the selected class');\n          return;\n        }\n        var dataObj = {\n          csid: that.setID(),\n          uid: pupil.uid,\n          cid: that.state.selectedClass\n        }\n        assignPupil(dataObj, that.state.token).then(response => {\n\n        })\n      })\n\n      getPupilByClass(that.state.selectedClass, that.state.token).then(response => {\n        that.setState({\n          pupilList: response.data,\n          classByList: true,\n          isPupilExists: response.data.length ? true : false,\n          checkedPupil: [],\n          selectedPupilList: []\n        });\n      })\n\n    } else {\n      alert(\"Please select Class and one or more pupil to assign them\");\n    }\n  }\n\n  setID() {\n    return \"ASGN\" + Date.now()\n  }\n\n  loadFillData() {\n    var that = this;\n    if (this.state.pupilList.length) {\n      return this.state.pupilList.map(data => {\n        if (data.isAssigned === 'Y' || data.isAssigned === null)\n          return (\n            <tr key={data.uid}>\n              {that.state.classByList ? null :\n                <td>{<input id={data.uid} name={data.uid} type=\"checkbox\"\n                  onChange={(e) => this.handleCheckBox(e, data)} />}</td>}\n              <td>{data.username}</td>\n              <td>{data.firstname}</td>\n              <td>{data.lastname}</td>\n              {that.state.classByList ? null : <th>{data.classname}</th>}\n            </tr>\n          )\n      })\n    }\n  }\n\n  handleCheckBox(e, data) {\n    var that = this;\n\n    let resultArray = []\n    let tempSelectedList = []\n\n    if (e.target.checked) {\n      resultArray = that.state.checkedPupil.filter(checkedID => checkedID !== e.target.id)\n      tempSelectedList = that.state.selectedPupilList.filter(obj => obj.uid !== e.target.id)\n      resultArray.push(e.target.id)\n      tempSelectedList.push(data)\n    } else {\n      resultArray = that.state.checkedPupil.filter(checkedID => checkedID !== e.target.id)\n      tempSelectedList = that.state.selectedPupilList.filter(obj => obj.uid !== e.target.id)\n    }\n    that.setState({\n      checkedPupil: resultArray,\n      selectedPupilList: tempSelectedList\n    })\n  }\n}\n\n\nexport default PupilTab;\n","/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/api/AdminAPI.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/SubjectPopUp.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/Userpopup.js",[],"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/admin/Component/Tablepopup.js",[],{"ruleId":"100","severity":1,"message":"101","line":16,"column":7,"nodeType":"102","messageId":"103","endLine":16,"endColumn":14},{"ruleId":"104","severity":1,"message":"105","line":156,"column":48,"nodeType":"106","messageId":"107","endLine":156,"endColumn":50},{"ruleId":"100","severity":1,"message":"108","line":99,"column":9,"nodeType":"102","messageId":"103","endLine":99,"endColumn":17},{"ruleId":"100","severity":1,"message":"109","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":16},{"ruleId":"100","severity":1,"message":"110","line":3,"column":53,"nodeType":"102","messageId":"103","endLine":3,"endColumn":72},{"ruleId":"104","severity":1,"message":"105","line":188,"column":44,"nodeType":"106","messageId":"107","endLine":188,"endColumn":46},"no-unused-vars","'options' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'countRow' is assigned a value but never used.","'Dropdown' is defined but never used.","'updateAssignedPupil' is defined but never used."]