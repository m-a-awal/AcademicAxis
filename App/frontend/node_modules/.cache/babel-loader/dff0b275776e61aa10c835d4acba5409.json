{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/ManageTestPopup.js\";\nimport React from \"react\";\nimport \"../../App.css\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ManageTestPopup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sid: this.props.sid,\n      testList: this.props.testList,\n      selectedTest: this.props.selectedTest,\n      selectedTestName: \"\",\n      selectedTestDate: \"\",\n      selectedTestId: \"\",\n      testDetailsList: this.props.testDetailsList\n    };\n    this.oninputChange = this.oninputChange.bind(this);\n    this.onTestSelect = this.onTestSelect.bind(this); // this.setUserID = this.setUserID.bind(this);\n\n    this.sendData = this.sendData.bind(this);\n    this.resetState = this.resetState.bind(this);\n    this.close = this.close.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.popupBtnText === \"Update\") {\n      var x = this.state.testList[this.getIndex(this.state.testList, this.state.selectedTest)];\n      var dt = this.state.testDetailsList.findIndex(obj => obj.tid === x.value);\n      this.setState({\n        selectedTestName: x.label,\n        selectedTestDate: this.state.testDetailsList[dt].testdate,\n        selectedTestId: this.state.testDetailsList[dt].tid\n      }, () => {\n        console.log(this.state.selectedTestDate);\n      });\n    }\n  }\n\n  render() {\n    var that = this;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App popup_inner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom_pop\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: that.props.popupHeaderText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              alignItem: \"left\"\n            },\n            children: [console.log(that.props.popupHeaderText), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Test Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              name: \"testname\",\n              defaultValue: that.props.popupBtnText === \"Add\" ? \"\" : that.state.selectedTestName,\n              onChange: that.oninputChange.bind(this, \"testname\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"Test Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"date\",\n              name: \"testdate\",\n              defaultValue: that.props.popupBtnText === \"Add\" ? \"\" : that.state.selectedTestDate.slice(0, 10),\n              onChange: that.oninputChange.bind(this, \"testdate\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-button-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              id: \"addUpdate_btn\",\n              onClick: that.sendData,\n              children: this.props.popupBtnText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger\",\n              id: \"cancel_btn\",\n              onClick: this.close,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n  getIndex(arr, testVal) {\n    return arr.findIndex(obj => obj.value === testVal);\n  }\n\n  close() {\n    this.props.closePopup();\n  }\n\n  oninputChange(key, e) {\n    switch (key) {\n      case \"testname\":\n        this.setState({\n          selectedTestName: e.target.value\n        });\n        break;\n\n      case \"testdate\":\n        this.setState({\n          selectedTestDate: e.target.value\n        }, () => {\n          console.log(this.state.testdate);\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  onTestSelect(e) {\n    this.setState({\n      selectedTest: e.value\n    });\n  }\n\n  setUserID() {\n    return \"TST\" + Date.now();\n  }\n\n  sendData() {\n    var data = this.props.popupBtnText === \"Add\" ? {\n      tid: this.setUserID(),\n      testname: this.state.selectedTestName,\n      testdate: this.state.selectedTestDate,\n      sid: this.state.sid\n    } : {\n      tid: this.state.selectedTestId,\n      testname: this.state.selectedTestName,\n      testdate: this.state.selectedTestDate,\n      sid: this.state.sid\n    }; // debugger;\n\n    this.resetState();\n\n    if (this.props.popupBtnText === \"Add\") {\n      if (data.testname.length && data.testdate.length) this.props.addTest(data);else alert(\"Please Provide all information\");\n    } else {\n      if (data.testname.length && data.testdate.length) this.props.updateTest(data);else alert(\"Please Provide all information\");\n    }\n  }\n\n  resetState() {\n    this.setState({\n      tid: \"\",\n      testname: \"\",\n      testdate: \"\"\n    });\n  }\n\n}\n\nexport default ManageTestPopup;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/AcademicAxis/App/frontend/src/view/teacher/ManageTestPopup.js"],"names":["React","Dropdown","ManageTestPopup","Component","constructor","props","state","sid","testList","selectedTest","selectedTestName","selectedTestDate","selectedTestId","testDetailsList","oninputChange","bind","onTestSelect","sendData","resetState","close","getIndex","componentDidMount","popupBtnText","x","dt","findIndex","obj","tid","value","setState","label","testdate","console","log","render","that","popupHeaderText","alignItem","slice","arr","testVal","closePopup","key","e","target","setUserID","Date","now","data","testname","length","addTest","alert","updateTest"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../../App.css\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\n\nclass ManageTestPopup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sid: this.props.sid,\n      testList: this.props.testList,\n      selectedTest: this.props.selectedTest,\n      selectedTestName: \"\",\n      selectedTestDate: \"\",\n      selectedTestId: \"\",\n      testDetailsList: this.props.testDetailsList,\n    };\n    this.oninputChange = this.oninputChange.bind(this);\n    this.onTestSelect = this.onTestSelect.bind(this);\n    // this.setUserID = this.setUserID.bind(this);\n    this.sendData = this.sendData.bind(this);\n    this.resetState = this.resetState.bind(this);\n    this.close = this.close.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.popupBtnText === \"Update\") {\n      var x =\n        this.state.testList[\n        this.getIndex(this.state.testList, this.state.selectedTest)\n        ];\n\n      var dt = this.state.testDetailsList.findIndex((obj) => obj.tid === x.value);\n      this.setState(\n        {\n          selectedTestName: x.label,\n          selectedTestDate: this.state.testDetailsList[dt].testdate,\n          selectedTestId: this.state.testDetailsList[dt].tid,\n        },\n        () => {\n          console.log(this.state.selectedTestDate);\n        }\n      );\n    }\n  }\n\n  render() {\n    var that = this;\n    return (\n      <div className=\"popup\">\n        <div className=\"App popup_inner\">\n          <div className=\"custom_pop\">\n            <h4>{that.props.popupHeaderText}</h4>\n            <br />\n            <div style={{ alignItem: \"left\" }}>\n              {console.log(that.props.popupHeaderText)}\n              <label><b>Test Name</b></label>\n              <br />\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                name=\"testname\"\n                defaultValue={that.props.popupBtnText === \"Add\" ? \"\" : that.state.selectedTestName}\n                onChange={that.oninputChange.bind(this, \"testname\")}\n              />\n              <br />\n              <label><b>Test Date</b></label>\n              <br />\n              <input\n                className=\"form-control\"\n                type=\"date\"\n                name=\"testdate\"\n                defaultValue={that.props.popupBtnText === \"Add\" ? \"\" : that.state.selectedTestDate.slice(0, 10)}\n                onChange={that.oninputChange.bind(this, \"testdate\")}\n              />\n            </div>\n            <br />\n            <div className=\"popup-button-area\">\n              <button className=\"btn btn-primary\" id=\"addUpdate_btn\" onClick={that.sendData}>\n                {this.props.popupBtnText}\n              </button>\n              <button className=\"btn btn-danger\" id=\"cancel_btn\" onClick={this.close}>\n                {\"Cancel\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  getIndex(arr, testVal) {\n    return arr.findIndex((obj) => obj.value === testVal);\n  }\n\n  close() {\n    this.props.closePopup();\n  }\n\n  oninputChange(key, e) {\n    switch (key) {\n      case \"testname\":\n        this.setState({ selectedTestName: e.target.value });\n        break;\n      case \"testdate\":\n        this.setState({ selectedTestDate: e.target.value }, () => {\n          console.log(this.state.testdate);\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  onTestSelect(e) {\n    this.setState({ selectedTest: e.value });\n  }\n\n  setUserID() {\n    return \"TST\" + Date.now();\n  }\n\n  sendData() {\n    var data =\n      this.props.popupBtnText === \"Add\"\n        ? {\n          tid: this.setUserID(),\n          testname: this.state.selectedTestName,\n          testdate: this.state.selectedTestDate,\n          sid: this.state.sid,\n        }\n        : {\n          tid: this.state.selectedTestId,\n          testname: this.state.selectedTestName,\n          testdate: this.state.selectedTestDate,\n          sid: this.state.sid,\n        };\n    // debugger;\n    this.resetState();\n    if (this.props.popupBtnText === \"Add\") {\n      if (data.testname.length && data.testdate.length)\n        this.props.addTest(data);\n      else alert(\"Please Provide all information\");\n    } else {\n      if (data.testname.length && data.testdate.length)\n        this.props.updateTest(data);\n      else alert(\"Please Provide all information\");\n    }\n  }\n\n  resetState() {\n    this.setState({\n      tid: \"\",\n      testname: \"\",\n      testdate: \"\",\n    });\n  }\n}\n\nexport default ManageTestPopup;\n"]},"metadata":{},"sourceType":"module"}